{"version":3,"file":"static/js/988.cdfaf8e0.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","components/hooks/http.hook.js"],"sourcesContent":["import img from './error.gif'\n\nconst ErrorMessage= ()=>{\n\treturn(\n\t\t<img style={{display: 'block',width:'250px', height:'250px', objectFit:'contain', margin:\"0 auto\"}} src={img} alt='Error'/>\n\t)\n}\n\nexport default ErrorMessage;","import {useState,useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = (props)=>{\n   \n    const [char,setChar] = useState({});\n\n    const {loading,error,getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    },[])\n\n    const onCharLoad = (char)=>{ \n        setChar(char);\n    }\n    \n    \n    const updateChar = ()=>{\n        clearError();\n        const id = Math.floor(Math.random() *(1011400 - 1011000)+1011000);\n        getCharacter(id)\n            .then(onCharLoad);        \n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/>:null;\n        const content = !(loading||error)?<View char = {char}/>: null;\n        const forBtn = ()=>{\n            updateChar();\n        }\n\n        return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={forBtn} className=\"button button__main\">\n                    <div className=\"inner\" >try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>    \n    )\n}\nconst View = ({char})=>{\n\n        const {name, description, thumbnail, homepage, wiki} =char;\n        const objectFit = thumbnail===`http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg`? {objectFit:'contain'}:{objectFit:'cover'} ;\n\n    return(\n         <div className=\"randomchar__block\">\n                <img style={objectFit} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">\n                    {description? description.slice(0,215) + '...' : 'The description not available'}\n                    </p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default RandomChar;","import {useState,useEffect,useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\n\nconst CharList = (props) =>{\n\n    const [charList, setCharlist] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n   \n    const {loading,error,getAllCharacters} =  useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset,true);\n    }, []);\n\n    const onRequest = (offset, initial)=>{\n        initial ? setNewItemLoading(false):setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n    \n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9 ){\n            ended = true;\n        }\n\n        setCharlist(charList=>[...charList, ...newCharList]);\n        setNewItemLoading(newItemloading => false);\n        setOffset(offset=> offset+9);\n        setCharEnded(charEnded=> ended);\n    }\n\n\n    function renderItems(arr){\n        const items = arr.map((item,i) => {\n            const objectFit = item.thumbnail===`http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg`? {objectFit:'contain'}:{objectFit:'cover'} ;\n\n            return(\n                 <CSSTransition classNames='char__item' timeout={1500} key={item.id}>\n                    <li key={item.id}\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i]=el}\n                    className=\"char__item\"\n                    onClick={()=> {\n                    props.onCharSelected(item.id);\n                    focusOnItem(i);\n                    }} \n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={objectFit}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n                 </CSSTransition>\n            )\n        })\n        return (\n                <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}  \n                </TransitionGroup>\n                </ul>\n\n        )\n    }\n    \n    const itemRefs  = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n     \n\n        const items = renderItems(charList);\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading&&!newItemLoading ? <Spinner/> : null;\n        return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n            style={{\"display\": charEnded ? 'none' : 'block'}}\n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            onClick={()=> onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    }\n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {Component, useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo =(props)=>{\n\n    const [char, setChar] = useState();\n   \n    const {loading,error,getCharacter,clearError} =  useMarvelService();\n\n    useEffect(()=>{\n        updateChar();\n    },[])\n\n    const updateChar=()=>{\n        const {charId} = props;\n        if(!charId) return;\n\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoad)\n        \n    }\n\n    const onCharLoad = (char)=>{\n            setChar(char)\n\n    }\n   \n\n    \n    useEffect(()=>{\n        updateChar();\n    },[props.charId])\n\n    const skeleton = char || loading || error ? null : <Skeleton/> \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n    return (\n        <div className=\"char__info\">\n           {skeleton}\n           {errorMessage}\n           {spinner}\n           {content}\n        </div>\n    )\n    }\n    \n\n\nconst View = ({char})=>{\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    const objectFit = thumbnail===`http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg`? {objectFit:'contain'}:{objectFit:'cover'} ;\n\n    return(\n        <>\n         <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={objectFit}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description} \n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length>0?null:'Comics not found'}\n                {\n                    comics.map((item,i)=>{\n                        if(i<10){\n                        return(\n                            <li className=\"char__comics-item\" key={i}>\n                            {item.name}\n                            </li>\n                        )} else {\n                            return null\n                        }\n                    \n                        })\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import{Component} from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n\tstate = {\n\t\terror: false\n\t}\n\n\tcomponentDidCatch(error, errorInfo){\n\t\tconsole.log(error, errorInfo);\n\t\tthis.setState({error: true});\n\t}\n\n\trender() {\n\t\tif (this.state.error){\n\t\t\treturn <ErrorMessage/>\n\t\t} \n\t\treturn this.props.children;\n\t}\n}\n\n\nexport default ErrorBoundary","import {useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport {Formik, Form, Field,ErrorMessage as FormikErrorMessage} from 'formik'\nimport * as Yup from 'yup'\n\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport useMarvelService from '../../services/MarvelService'\nimport Spinner from '../spinner/Spinner';\n\nimport './CharSearchForm.scss'\n\n\n\nconst CharSearchForm = () =>{\n\n\tconst [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\tconst errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const spinner = loading ? <Spinner/> : null;\n\n\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\t\n\treturn (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                           >\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n                {spinner}\n            {results}\n            \t{errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;\n","import {useState} from \"react\";\nimport {Helmet} from 'react-helmet'\n\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = ()=>{\n\tconst [selectedChar, setSelectedChar] = useState(null);\n    const onCharSelected = (id)=>{\n        setSelectedChar(id);\n    }\n\n\treturn(\n\t\t<>\n        <Helmet>\n            <meta\n                name=\"description\"\n                content=\"Marvel information portal\"\n            />\n        <title>Marvel information portal</title>\n        </Helmet>\n\t\t<ErrorBoundary>\n            <RandomChar/>\n        </ErrorBoundary>\n        <div className=\"char__content\">\n        <ErrorBoundary>\n         <CharList onCharSelected={onCharSelected}/>\n        </ErrorBoundary>\n        <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n        </div>\n                    </div> \n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                \n\t\t</>\n\t)\n}\n\nexport default MainPage","import { useHttp } from '../components/hooks/http.hook';\n\nconst useMarvelService = ()=>{\n\tconst {loading,request,error,clearError} = useHttp();\n\t\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n\tconst _apiKey = 'apikey=ff5ce3ecbcc8c665529b8eaa817b386d'\n\tconst _baseOffset= 210;\n\t\n\tconst getAllComics = async(offset=_baseOffset)=>{\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformComics);\n\t}\n\tconst getComics = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n\tconst getAllCharacters =async (offset = _baseOffset)=>{\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n\tconst getCharacter = async(id)=>{\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t}\n\tconst getCharacterByName = async(name)=>{\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n\t}\n\tconst _transformComics = (comics)=>{\n\t\treturn{\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description? comics.description:'There is no description',\n\t\t\tpageCount: comics.pageCount?`${comics.pageCount} p.`:'No information about of number of pages',\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\n\t\t\tthumbnail: comics.thumbnail.path +'.'+ comics.thumbnail.extension,\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n\t\t}\n\t}\n\n\tconst _transformCharacter = (char)=>{\n\t\treturn {\n\t\t\t  \tname: char.name,\n                description: char.description,\n                thumbnail: char.thumbnail.path +'.'+ char.thumbnail.extension,\n                homepage: char.urls[0].url,\n                wiki: char.urls[1].url,\n\t\t\t\tid: char.id,\n\t\t\t\tcomics: char.comics.items\n\t\t}\n\t}\n\n\treturn {loading, error, getAllCharacters, getCharacter,clearError,getAllComics,getComics,getCharacterByName}\n}\n\nexport default useMarvelService","import {useState,useCallback} from 'react';\n\nexport const useHttp = () =>{\n\tconst [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n\tconst request = useCallback(async (url,method='GET',body=null,headers={\n\t\t'Content-type': 'application/json'\n\t}) =>{\n\t\tsetLoading(true);\n\n\t\ttry{\n\t\t\tconst response = await fetch(url,{method,body,headers});\n\t\t\tif(!response.ok){\n\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\n\t\t}\n\t\t\tconst data = await response.json();\n\n\t\t\tsetLoading(false);\n\t\t\treturn data;\n\n\t\t}catch(e){\n\t\t\tsetLoading(false);\n\t\t\tsetError(e.message);\n\t\t\tthrow e;\n\t\t}\n\t},[]);\n\tconst clearError = useCallback(() =>{\n\t\tsetError(null)\n\t},[])\n\treturn{loading,request,clearError,error}\n}\t"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","className","slice","href","props","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoad","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","charList","setCharlist","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","newItemloading","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","classNames","timeout","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","getCharacterByName","onCharLoaded","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","setSelectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllComics","res","_transformComics","getComics","_transformCharacter","title","pageCount","language","textObjects","path","extension","price","prices","urls"],"sourceRoot":""}