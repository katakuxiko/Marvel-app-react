{"version":3,"file":"static/js/682.8d658435.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","components/hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\n\nconst ErrorMessage= ()=>{\n\treturn(\n\t\t<img style={{display: 'block',width:'250px', height:'250px', objectFit:'contain', margin:\"0 auto\"}} src={img} alt='Error'/>\n\t)\n}\n\nexport default ErrorMessage;","import {useState,useEffect} from 'react'\nimport { Link } from 'react-router-dom';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport './comicsList.scss';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nconst ComicsList = () => {\n    const [comicsList,setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(true);\n    const [offset, setOffset] = useState(210);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading,error,getAllComics} =  useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset,true)\n    },[])\n\n    const onRequest=(offset, initial) => {\n        initial ? setNewItemLoading(false):setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsLoaded)\n    }\n    const onComicsLoaded=(newComics) => {\n        let ended = false;\n        if(newComics.length < 8 ){\n            ended = true;\n        }\n        setComicsList(comicsList =>[...comicsList,...newComics])\n        setNewItemLoading(false);\n        setOffset(offset=> offset+8);\n        setComicsEnded(charEnded=> ended);\n\n    }\n\n    function renderItems(arr){\n        const items= arr.map((item,i)=>{\n            const objectFit = item.thumbnail===`http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg`? {objectFit:'contain'}:{objectFit:'cover'} ;\n            return(\n                <CSSTransition classNames='comics__item' timeout={1500} key={item.id}>\n                 <li key={i} className=\"comics__item\">\n                    <Link to={`/comics/${item.id}`} href=\"#\">\n                        <img style={objectFit} src={item.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n                </CSSTransition>\n            )\n\n        })\n        return(\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    \n\n\n    const items = renderItems(comicsList);\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading&&!newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n            disabled={newItemLoading} \n            onClick={()=> onRequest(offset)}\n            className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from 'react-helmet'\n\nimport AppBanner from \"../appBanner/AppBanner\"\nimport ComicsList from \"../comicsList/ComicsList\"\n\nconst ComicsPage = ()=>{\n\treturn(\n\t\t<>\n\t\t<Helmet>\n            <meta\n                name=\"description\"\n                content=\"Page with list of our comics\"\n            />\n        <title>Comics page</title>\n        </Helmet>\n\t\t<AppBanner/>\n        <ComicsList/>\n\t\t</>\n\t)\n}\n\nexport default ComicsPage","import { useHttp } from '../components/hooks/http.hook';\n\nconst useMarvelService = ()=>{\n\tconst {loading,request,error,clearError} = useHttp();\n\t\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n\tconst _apiKey = 'apikey=ff5ce3ecbcc8c665529b8eaa817b386d'\n\tconst _baseOffset= 210;\n\t\n\tconst getAllComics = async(offset=_baseOffset)=>{\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformComics);\n\t}\n\tconst getComics = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n\tconst getAllCharacters =async (offset = _baseOffset)=>{\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t}\n\tconst getCharacter = async(id)=>{\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t}\n\tconst getCharacterByName = async(name)=>{\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n\t}\n\tconst _transformComics = (comics)=>{\n\t\treturn{\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description? comics.description:'There is no description',\n\t\t\tpageCount: comics.pageCount?`${comics.pageCount} p.`:'No information about of number of pages',\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\n\t\t\tthumbnail: comics.thumbnail.path +'.'+ comics.thumbnail.extension,\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n\t\t}\n\t}\n\n\tconst _transformCharacter = (char)=>{\n\t\treturn {\n\t\t\t  \tname: char.name,\n                description: char.description,\n                thumbnail: char.thumbnail.path +'.'+ char.thumbnail.extension,\n                homepage: char.urls[0].url,\n                wiki: char.urls[1].url,\n\t\t\t\tid: char.id,\n\t\t\t\tcomics: char.comics.items\n\t\t}\n\t}\n\n\treturn {loading, error, getAllCharacters, getCharacter,clearError,getAllComics,getComics,getCharacterByName}\n}\n\nexport default useMarvelService","import {useState,useCallback} from 'react';\n\nexport const useHttp = () =>{\n\tconst [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n\tconst request = useCallback(async (url,method='GET',body=null,headers={\n\t\t'Content-type': 'application/json'\n\t}) =>{\n\t\tsetLoading(true);\n\n\t\ttry{\n\t\t\tconst response = await fetch(url,{method,body,headers});\n\t\t\tif(!response.ok){\n\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\n\t\t}\n\t\t\tconst data = await response.json();\n\n\t\t\tsetLoading(false);\n\t\t\treturn data;\n\n\t\t}catch(e){\n\t\t\tsetLoading(false);\n\t\t\tsetError(e.message);\n\t\t\tthrow e;\n\t\t}\n\t},[]);\n\tconst clearError = useCallback(() =>{\n\t\tsetError(null)\n\t},[])\n\treturn{loading,request,clearError,error}\n}\t"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsLoaded","newComics","ended","length","charEnded","items","arr","map","item","i","thumbnail","CSSTransition","classNames","timeout","to","id","href","title","price","TransitionGroup","component","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","onClick","Helmet","name","content","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","res","results","_transformComics","getComics","getAllCharacters","_transformCharacter","getCharacter","getCharacterByName","comics","description","pageCount","language","textObjects","path","extension","prices","char","homepage","urls","wiki"],"sourceRoot":""}