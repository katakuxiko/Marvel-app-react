{"version":3,"file":"static/js/504.c2f627bd.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","components/hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage= ()=>{\r\n\treturn(\r\n\t\t<img style={{display: 'block',width:'250px', height:'250px', objectFit:'contain', margin:\"0 auto\"}} src={img} alt='Error'/>\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import {useState,useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport setContent from '../../utils/setContent';\n\n\nconst RandomChar = (props)=>{\n   \n    const [char,setChar] = useState({});\n\n    const {getCharacter, clearError, process,setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    },[])\n\n    const onCharLoad = (char)=>{ \n        setChar(char);\n    }\n    \n    \n    const updateChar = ()=>{\n        clearError();\n        const id = Math.floor(Math.random() *(1011400 - 1011000)+1011000);\n        getCharacter(id)\n            .then(onCharLoad)\n            .then(() =>setProcess('confirmed'));\n    }\n\n        \n        const forBtn = ()=>{\n            updateChar();\n        }\n\n        return (\n        <div className=\"randomchar\">\n            {\n                setContent(process, View, char)\n            }\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={forBtn} className=\"button button__main\">\n                    <div className=\"inner\" >try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>    \n    )\n}\nconst View = ({data})=>{\n\n        const {name, description, thumbnail, homepage, wiki} =data;\n        const objectFit = thumbnail===`http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg`? {objectFit:'contain'}:{objectFit:'cover'} ;\n\n    return(\n         <div className=\"randomchar__block\">\n                <img style={objectFit} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">\n                    {description? description.slice(0,215) + '...' : 'The description not available'}\n                    </p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default RandomChar;","import {useState,useEffect,useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n        switch(process){\n            case 'waiting':\n                return <Spinner/> ;\n            case 'loading':\n                return newItemLoading?<Component />:<Spinner/>;\n            case 'confirmed':\n                return <Component/>;\n            case 'error':\n                return <ErrorMessage/>;\n            default:\n                throw new Error(`Unexpected process state`);\n        }\n }\n\nconst CharList = (props) =>{\n\n    const [charList, setCharlist] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n   \n    const {getAllCharacters, process,setProcess} =  useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset,true);\n    }, []);\n\n    const onRequest = (offset, initial)=>{\n        initial ? setNewItemLoading(false):setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded).then(()=>setProcess('confirmed'))\n    }\n    \n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9 ){\n            ended = true;\n        }\n\n        setCharlist(charList=>[...charList, ...newCharList]);\n        setNewItemLoading(newItemloading => false);\n        setOffset(offset=> offset+9);\n        setCharEnded(charEnded=> ended);\n    }\n\n\n    function renderItems(arr){\n        console.log('renderItems');\n        const items = arr.map((item,i) => {\n            const objectFit = item.thumbnail===`http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg`? {objectFit:'contain'}:{objectFit:'cover'} ;\n\n            return(\n                 <CSSTransition classNames='char__item' timeout={1500} key={item.id}>\n                    <li key={item.id}\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i]=el}\n                    className=\"char__item\"\n                    onClick={()=> {\n                    props.onCharSelected(item.id);\n                    focusOnItem(i);\n                    }} \n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={objectFit}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n                 </CSSTransition>\n            )\n        })\n        return (\n                <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}  \n                </TransitionGroup>\n                </ul>\n\n        )\n    }\n    \n    const itemRefs  = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n     \n    const elements = useMemo(()=>{\n        return setContent(process, () => renderItems(charList), newItemLoading)\n    },[process])\n\n        return (\n        <div className=\"char__list\">\n            {\n                elements\n            }\n            \n            <button \n            style={{\"display\": charEnded ? 'none' : 'block'}}\n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            onClick={()=> onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    }\n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\n\n\nexport default CharList;","import {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport setContent from '../../utils/setContent';\n\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo =(props)=>{\n\n    const [char, setChar] = useState();\n   \n    const {getCharacter,clearError,process,setProcess} =  useMarvelService();\n\n    useEffect(()=>{\n        updateChar();\n    },[])\n\n    const updateChar=()=>{\n        const {charId} = props;\n        if(!charId) return;\n\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoad).then(()=>setProcess('confirmed'))\n        \n    }\n\n    const onCharLoad = (char)=>{\n            setChar(char)\n\n    }\n   \n\n    \n    useEffect(()=>{\n        updateChar();\n    },[props.charId])\n\n    \n\n    // const skeleton = char || loading || error ? null : <Skeleton/> \n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n    return (\n        <div className=\"char__info\">\n           {/* {skeleton}\n           {errorMessage}\n           {spinner}\n           {content} */}\n           {\n               setContent(process, View, char)\n           }\n        </div>\n    )\n    }\n    \n\n\nconst View = ({data})=>{\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    const objectFit = thumbnail===`http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg`? {objectFit:'contain'}:{objectFit:'cover'} ;\n\n    return(\n        <>\n         <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={objectFit}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description} \n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length>0?null:'Comics not found'}\n                {\n                    comics.map((item,i)=>{\n                        if(i<10){\n                        return(\n                            <li className=\"char__comics-item\" key={i}>\n                            {item.name}\n                            </li>\n                        )} else {\n                            return null\n                        }\n                    \n                        })\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import{Component} from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo){\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({error: true});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error){\r\n\t\t\treturn <ErrorMessage/>\r\n\t\t} \r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundary","import {useState} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Formik, Form, Field,ErrorMessage as FormikErrorMessage} from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './CharSearchForm.scss'\r\n\r\n\r\n\r\nconst CharSearchForm = () =>{\r\n\r\n\tconst [char, setChar] = useState(null);\r\n    const {process,setProcess, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n\r\n            ;\r\n    }\r\n\tconst errorMessage = process==='error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const spinner = process ==='loading' ? <Spinner/> : null;\r\n\r\n\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\t\r\n\treturn (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled = {\r\n                                process === 'loading'\r\n                            }\r\n                           >\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n                {spinner}\r\n            {results}\r\n            \t{errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n","import {useState} from \"react\";\r\nimport {Helmet} from 'react-helmet'\r\n\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = ()=>{\r\n    console.log('MP')\r\n\tconst [selectedChar, setSelectedChar] = useState(null);\r\n    const onCharSelected = (id)=>{\r\n        setSelectedChar(id);\r\n    }\r\n\r\n\treturn(\r\n\t\t<>\r\n        <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n            />\r\n        <title>Marvel information portal</title>\r\n        </Helmet>\r\n\t\t<ErrorBoundary>\r\n            <RandomChar/>\r\n        </ErrorBoundary>\r\n        <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n         <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n        </div>\r\n                    </div> \r\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n                \r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage","import { useHttp } from '../components/hooks/http.hook';\r\n\r\nconst useMarvelService = ()=>{\r\n\tconst {loading,request,error,clearError,process,setProcess} = useHttp();\r\n\t\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = \"apikey=ff5ce3ecbcc8c665529b8eaa817b386d\";\r\n\tconst _baseOffset= 210;\r\n\t\r\n\tconst getAllComics = async(offset=_baseOffset)=>{\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\tconst getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n\tconst getAllCharacters =async (offset = _baseOffset)=>{\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\tconst getCharacter = async(id)=>{\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\tconst getCharacterByName = async(name)=>{\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\t}\r\n\tconst _transformComics = (comics)=>{\r\n\t\treturn{\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description? comics.description:'There is no description',\r\n\t\t\tpageCount: comics.pageCount?`${comics.pageCount} p.`:'No information about of number of pages',\r\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\r\n\t\t\tthumbnail: comics.thumbnail.path +'.'+ comics.thumbnail.extension,\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformCharacter = (char)=>{\r\n\t\treturn {\r\n\t\t\t  \tname: char.name,\r\n                description: char.description,\r\n                thumbnail: char.thumbnail.path +'.'+ char.thumbnail.extension,\r\n                homepage: char.urls[0].url,\r\n                wiki: char.urls[1].url,\r\n\t\t\t\tid: char.id,\r\n\t\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\treturn {loading, \r\n\t\terror,\r\n\t\tprocess,\r\n\t\tsetProcess, \r\n\t\tgetAllCharacters, \r\n\t\tgetCharacter,\r\n\t\tclearError,\r\n\t\tgetAllComics,\r\n\t\tgetComics,\r\n\t\tgetCharacterByName\r\n}\r\n}\r\n\r\nexport default useMarvelService","import {useState,useCallback} from 'react';\r\n\r\nexport const useHttp = () =>{\r\n\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url,method='GET',body=null,headers={\r\n\t\t'Content-type': 'application/json'\r\n\t}) =>{\r\n\t\tsetProcess('loading');\r\n\t\ttry{\r\n\t\t\tconst response = await fetch(url,{method,body,headers});\r\n\t\t\tif(!response.ok){\r\n\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n\t\t}\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}catch(e){\r\n\t\t\tsetProcess('error');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t},[]);\r\n\tconst clearError = useCallback(() =>{\r\n\t\tsetProcess('loading');\r\n\t},[])\r\n\treturn{request,clearError, process,setProcess}\r\n}\t","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data ) => {\r\n        switch(process){\r\n            case 'waiting':\r\n                return <Skeleton/> ;\r\n                break ;\r\n            case 'loading':\r\n                return <Spinner/>;\r\n                break ;\r\n            case 'confirmed':\r\n                return <Component data={data}/>;\r\n                break ;\r\n            case 'error':\r\n                return <ErrorMessage/>;\r\n                break;\r\n            default:\r\n                throw new Error(`Unexpected process state`);\r\n        }\r\n }\r\n\r\n export default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","className","slice","href","props","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoad","id","Math","floor","random","then","setContent","onClick","mjolnir","charList","setCharlist","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","newItemloading","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","console","log","items","map","i","CSSTransition","classNames","timeout","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","ErrorBoundary","state","error","errorInfo","this","setState","children","getCharacterByName","onCharLoaded","errorMessage","spinner","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","setSelectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","loading","_apiBase","_apiKey","_baseOffset","getAllComics","res","_transformComics","getComics","_transformCharacter","title","pageCount","language","textObjects","path","extension","price","prices","urls"],"sourceRoot":""}